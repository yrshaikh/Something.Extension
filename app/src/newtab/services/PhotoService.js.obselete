import { AjaxService } from './AjaxService';
import { LocalStorageService } from './LocalStorageService';

export class PhotoService {
    constructor() {
        this.ajaxService = new AjaxService();
        this.currentIndexCache = new LocalStorageService('currentIndex');
        this.currentImageCache = new LocalStorageService('currentImage');
        this.imageStoreCache = new LocalStorageService('imageStore');
        this.collectionUrl = `https://api.unsplash.com/collections/3612665?per_page=100&v=${parseInt(Math.random() * 100)}&client_id=4ea9098287864f4bcb9d6284912e3e520e302224d3acc440e66122172f412650`;
    }
    async get() {
        let image = this.getImageFromCache();

        if (image) {
            return image;
        }

        image = this.getImageFromImageStoreCache();

        if (image) {
            return image;
        }

        image = this.getImageFromImageStoreApi();
        return image;
    }
    getImageFromCache() {
        return JSON.parse(this.currentImageCache.get());
    }
    getImageFromImageStoreCache() {
        let imageStore = JSON.parse(this.imageStoreCache.get());
        let image = null;
        if (imageStore) {
            image = this.getSequencedImageFromStore(this.currentIndexCache.get(), imageStore);
            this.currentImageCache.set(JSON.stringify(image));
        }
        return image;
    }
    async getImageFromImageStoreApi() {
        const imageStore = await this.getImageStoreFromApi();
        this.imageStoreCache.set(JSON.stringify(imageStore));
        const image = this.getSequencedImageFromStore(-1, imageStore);
        this.currentIndexCache.set(0);
        this.currentImageCache.set(JSON.stringify(image));
        return image;
    }
    resetImage() {
        this.currentImageCache.clear();
    }
    resetImageStore() {
        this.currentImageCache.clear();
        this.imageStoreCache.clear();
    }
    getSequencedImageFromStore(currentIndex, imageStore) {
        console.log(`${currentIndex} of ${imageStore.length-1}`);
        if (currentIndex == imageStore.length-1)
            currentIndex = 0;
        else
            currentIndex++;

        this.currentIndexCache.set(currentIndex);
        const image = imageStore[currentIndex];
        return image;
    }
    async getImageStoreFromApi(){
        let apiResponse = await this.ajaxService.get(this.collectionUrl);
        const imageStore = [];
        apiResponse.preview_photos.forEach((element, i) => {
            imageStore.push({
                id: element.id,
                url: element.urls.regular,
                urlHd: element.urls.full
            });
        });
        return imageStore;
    }
}